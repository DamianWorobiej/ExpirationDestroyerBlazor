@page "/"
@inject IProductsService Products
@inject IJSRuntime JsRuntime;
@using ExpirationDestroyerBlazorServer.BusinessLogic.ProductsService
@using ExpirationDestroyerBlazorServer.BusinessLogic.Exceptions
@using ExpirationDestroyerBlazorServer.BusinessLogic.DTOs

<div id="modalDialog" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <EditForm Model="@Product">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group d-flex justify-content-between">
                        <label class="col-form-label col-3" for="name">Nazwa</label>
                        <InputText @bind-Value="@Product.Name" id="name" Class="form-control" />
                    </div>
                    <div class="form-group d-flex justify-content-between">
                        <label class="col-form-label col-3" for="expiration-date">Data przydatności</label>
                        <InputDate class="form-control" id="expiration-date" @bind-Value="Product.ExpirationDate" />
                    </div>
                    @if (!IsEdited)
                    {
                        <div class="form-group d-flex justify-content-between">
                            <label class="col-form-label col-3" for="amount">Ilość</label>
                            <InputNumber class="form-control" id="amount" min="1" @bind-Value="Amount" />
                        </div>
                        <button type="button" @onclick="@SubmitHandler" class="btn btn-primary" data-dismiss="modal">Zapisz i zamknij okno</button>
                    }
                    <button type="button" @onclick="@SubmitHandler" class="btn btn-primary" data-dismiss="@(IsEdited == true ? "modal" : "")">Zapisz</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<button data-toggle="modal" data-target="#modalDialog" class="btn btn-primary" style="width:100%; margin-bottom:70px;" @onclick="@ClearProduct">Nowy produkt</button>

<button id="filter-button-not-consumed" type="button" class="btn @(Filter == Filters.AllNotConsumed ? "btn-info" : "btn-info-outline filter-button")" @onclick="(e => RefreshList(Filters.AllNotConsumed))">Nie zjedzone</button>
<button id="filter-button-all" type="button" class="btn @(Filter == Filters.All ? "btn-info" : "btn-info-outline filter-button")" @onclick="(e => RefreshList(Filters.All))">Wszystkie</button>

@if (!ProductsList.Any())
{
    <p><em>Loading...</em></p>
}
else
{

    <table style="width:100%;border-collapse: separate;border-spacing: 0 1em;">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Data przydatności</th>
                <th>Zjedzone</th>
                <th>Edytuj</th>
                <th>Usuń</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in ProductsList)
            {
                <tr style="border: 2px solid black" class="@(ProductRowClass(prod))">
                    <td>@prod.Name</td>
                    <td>@prod.ExpirationDate.ToString("dd-MM-yyyy")</td>
                    <td><button class="btn btn-success" @onclick="@(e => ConsumeProduct(prod.ID))">Zjedzone</button></td>
                    <td><button class="btn btn-primary" id="edit-@prod.ID" data-toggle="modal" data-target="#modalDialog" @onclick="@(e => EditProduct(prod.ID))">Edytuj</button></td>
                    <td><button class="btn btn-danger" id="delete-@prod.ID" @onclick="@(e => DeleteProduct(prod.ID))">Usuń</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    enum Filters
    {
        AllNotConsumed,
        All
    }

    private ProductDTO Product = new ProductDTO()
    {
        ExpirationDate = DateTime.Today
    };
    private int Amount = 1;
    private List<ProductDTO> ProductsList = new List<ProductDTO>();
    private bool IsEdited;
    private Filters Filter;


    protected override async Task OnInitializedAsync()
    {
        Filter = Filters.AllNotConsumed;
        await this.RefreshList(Filter);
    }

    private async Task GetAllNotConsumed()
    {
        var prod = await Products.GetAllNotConsumedAsync();

        ProductsList = prod.OrderBy(p => p.ExpirationDate).ToList();
    }

    private async Task GetAll()
    {
        var prod = await Products.GetAllAsync();

        ProductsList = prod.OrderBy(p => p.ExpirationDate).ToList();
    }

    private async Task RefreshList(Filters filter)
    {
        switch (filter)
        {
            case Filters.AllNotConsumed:
                await this.GetAllNotConsumed();
                break;
            case Filters.All:
                await this.GetAll();
                break;
            default:
                break;
        }

        Filter = filter;
        StateHasChanged();
    }

    private async void SubmitHandler()
    {
        if (IsEdited)
        {
            try
            {
                await Products.UpdateAsync(Product);
            }
            catch (InvalidProductDataException e)
            {
                await JsRuntime.InvokeVoidAsync("alert", e.Message);
                return;
            }

            var prod = ProductsList.First(p => p.ID == Product.ID);
            var index = ProductsList.IndexOf(prod);
            ProductsList[index] = Product;
        }
        else
        {
            if (Amount > 1)
            {
                List<int> ids;
                try
                {
                    ids = await Products.AddMultipleAsync(Product, Amount);
                }
                catch (ArgumentException e)
                {
                    await JsRuntime.InvokeVoidAsync("alert", e.Message);
                    return;
                }

                foreach (var id in ids)
                {
                    Product.ID = id;
                    ProductsList.Add(Product);
                }

                Product = new ProductDTO()
                {
                    ExpirationDate = DateTime.Now
                };
                Amount = 1;
            }
            else
            {
                int productId;
                try
                {
                    productId = await Products.AddAsync(Product);
                }
                catch (InvalidProductDataException e)
                {
                    await JsRuntime.InvokeVoidAsync("alert", e.Message);
                    return;
                }

                Product.ID = productId;
                ProductsList.Add(Product);
                Product = new ProductDTO()
                {
                    ExpirationDate = DateTime.Now
                };
            }
        }

        ProductsList = ProductsList.OrderBy(p => p.ExpirationDate).ToList();
        StateHasChanged();
    }

    private void ClearProduct()
    {
        Product = new ProductDTO()
        {
            ExpirationDate = DateTime.Today
        };
        IsEdited = false;
        Amount = 1;

    }

    private void EditProduct(int id)
    {
        Product = ProductsList.First(p => p.ID == id).Clone();
        IsEdited = true;
    }

    private async void ConsumeProduct(int id)
    {
        await Products.SetAsConsumedAsync(id);
        var prod = ProductsList.First(p => p.ID == id);
        ProductsList.Remove(prod);
        StateHasChanged();
    }

    private async void DeleteProduct(int id)
    {
        await Products.DeleteAsync(id);

        var prod = ProductsList.First(p => p.ID == id);
        ProductsList.Remove(prod);
        StateHasChanged();
    }

    private string ProductRowClass(ProductDTO product)
    {
        if (product.Consumed)
        {
            return "consumed-row";
        }

        if (product.Expired)
        {
            return "expired-row";
        }

        if (product.ExpirationDate <= DateTime.Today.AddDays(2))
        {
            return "nearly-expired-row";
        }

        if (product.ExpirationDate <= DateTime.Today.AddDays(7))
        {
            return "close-to-expire-row";
        }

        return string.Empty;
    }
}